@page "/usuario/formulario/{Id:int}"
@page "/usuario/nuevo"
@using Front.Models
@using Front.Services
@using Front.Interfaces
@inject IUsuarioService UsuarioService
@inject NavigationManager NavigationManager

<PageTitle>@(EsNuevo ? "Nuevo Usuario" : "Editar Usuario")</PageTitle>

<div class="usuario-form-container">
    <div class="card">
        <div class="card-header">
            <h2>@(EsNuevo ? "Nuevo Usuario" : "Editar Usuario")</h2>
        </div>
        <div class="card-body">
            <EditForm Model="@usuario" OnValidSubmit="GuardarUsuario">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" @bind-Value="usuario.Nombre" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Nombre)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="apellido" class="form-label">Apellido</label>
                        <InputText id="apellido" @bind-Value="usuario.Apellido" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Apellido)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="cedula" class="form-label">Cédula</label>
                        <InputText id="cedula" @bind-Value="usuario.Cedula" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Cedula)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="telefono" class="form-label">Teléfono</label>
                        <InputText id="telefono" @bind-Value="usuario.Telefono" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Telefono)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="direccion" class="form-label">Dirección</label>
                        <InputText id="direccion" @bind-Value="usuario.Direccion" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Direccion)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="fechaNacimiento" class="form-label">Fecha de Nacimiento</label>
                        <InputDate id="fechaNacimiento" @bind-Value="usuario.FechaNacimiento" class="form-control" />
                        <ValidationMessage For="@(() => usuario.FechaNacimiento)" />
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                        <span class="oi oi-x" aria-hidden="true"></span> Cancelar
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <span class="oi oi-check" aria-hidden="true"></span> Guardar
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .usuario-form-container {
        max-width: 900px;
        margin: 0 auto;
    }

    .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border: none;
        border-radius: 8px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
    }

    h2 {
        color: #343a40;
        margin-bottom: 0;
    }

    .form-label {
        font-weight: 500;
        color: #495057;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    [Parameter]
    public string? Id { get; set; }

    private Usuario usuario = new Usuario();
    private bool EsNuevo => string.IsNullOrEmpty(Id);

    protected override async Task OnInitializedAsync()
    {
        if (!EsNuevo)
        {
            if (int.TryParse(Id, out int id))
            {
                usuario = await UsuarioService.GetUsuarioById(id);
            }
        }
        else
        {
            usuario.FechaNacimiento = DateTime.Today;
        }
    }

    private async Task GuardarUsuario()
    {
        if (EsNuevo)
        {
            await UsuarioService.CreateUsuario(usuario);
        }
        else
        {
            await UsuarioService.UpdateUsuario(usuario);
        }

        NavigationManager.NavigateTo("usuarios");
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("usuarios");
    }
}
